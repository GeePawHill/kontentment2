So I wrote this program a few years ago, called "kontentment". It's at github.

kontentment is a system for producing animations with a particular look and feel. Here's a video made using it: 

https://www.geepawhill.org/2018/01/18/five-underplayed-premises-of-tdd-2/

There are a few others there at the site, too. Why only a few, you might ask?

Well, it's, mmmmm, it's not very good, and it's not-very-goodness precludes me being able to take it all the way to what I really wanted.

So, kontentment2 is afoot.

Why isn't it very good? That's an important question to answer. 

But why am I rewriting instead of refactoring? That's an even more important question.

Have beer, will type. :)

There are reasons it isn't very good from a feature -- external software quality (ESQ) -- perspective, and there are reasons it isn't very good from a coding -- internal software quality (ISQ) -- perspective.

Features: What I *thought* I wanted is there. I *thought* I wanted an integrated tool that could let me take a source video and use a DSL to create an animation to overlay on it.

This turned out to not be what I wanted. The DSL is direclty in kotlin, which means even minor edits involve kill-edit-run cycles. And the truth is, I don't *need* the video or the timings embedded in a script.

What I *now* want: interactive editing, and a system based on me actually cue-ing the animations.

So, in feature terms, rev 1 was "works as designed". Problem is, the customer team -- that'd be me -- was not as smart as they thought they were.

A perfectly ordinary fact of geek -life, of course. We learn from each rev, and sometimes we learn that we went the wrong way. No matter, we can *change* it for the second rev.

Provided. Only. Provided only that the underlying code was built to be changed well. Enter the second question: why is the ISQ of kontentment1 so low?

The biggest problem is that much of the UI was allowed to kudzu into much of the domain code. UI code is inherently difficult to test, and I was using a new programming language (kotlin) and a new ui framework (tornadofx covering javafx), and I made a lot of boundary errors.

So? Refactor it!

That's what I tell most of the teams I work with most of the time. Most of the time, but not all of the time.

The rewrite-vs-refactor decision I'm making is risky, I am well aware of that, and I nearly always argue in favor of refactoring.

So what makes this situation different?

It is this: the significant change in the desired feature-set will involve me throwing away a starggering amount of code. The kudzu-ification will involve me throwing away even more of it.

All I'd really be keeping -- and I'm proud of both of these things -- is a) incremental bezier drawing, and b) "human-izing" both beziers and straight lines. It is on the order of 200 lines of code. :)

200 lines of code!?!? There's 3500 lines in this stupid wreck.

Most of them implement features I don't want. Those that implement features I do want are kudzu'd up with UI stuff I wasn't then experienced enough to avoid.

So. Rewrite it is.

My bottom-line on this decision, and I may come to regret this later: kontentment2 is not an enhancement to kontentment1. It's a whole new program, in the same domain space, with very different goals.

When I get to the parts where I have tested and valid running-dog kontentment1 code that I want, I will not hesitate to liberate them for the peace-loving peoples of kontentment2.

I will upgrade all my gradle etc. for kontentment2, then make it public on github, the better to become a laughingstock with.

But here's an example of what I mean by changing feature set. This is the sum total of kontentment2's current feature set: 1) the windows are skinnable. 2) the window for showing the presentation view can be popped out, leaving behind the controller and the script. 3) that window is auto-scaling.


A windows top-level-frame with three divisions On the left is a window for holding a script view. On the top-right is a window to present the resulting animation. On the bottom-right is a detail-window for editing script elements.
ALT
The same three divisions, but now a) they look horrible because they have a new skin that's very ugly and b) the presentation is popped out, and much larger, suitable for being recorded via OBS on a separate screen.
ALT


The old kontentment couldn't skin and didn't have a place to edit a script or show an entry's details, and couldn't pop the prezzie window in or out. It *could* scale it correctly, but that is all.

Not much, yeah? But it's an important part of the feature set. I can't coerce OBS to record a sub-window, only a top-level window. Thus the pop-out. I know that if I ever have others use it, many love/hate dark/light modes.

I didn't know how to do those things. So I started there.

There's one more windowing thing I need to make sure I know how to do, and then onto the first substantive work.

The one more thing: I want to be able to force the prezzie window to be easily recorded via OBS, which will mean having a mode where -- I'm not sure which is required -- it is either full-screen w/no windows hardware hanging off it, or it scales to hold *only* the black scaled rectangle that is the prezzie surface.

Anyway, I'll update the versions of things and make the repo public this weekend. 

From there? Well. I am a huge fan of @RonJeffries 's detailed write-ups of his programming time. (See here, to get the experience of how a master geek really thinks and works: https://ronjeffries.com/ )

I want to try that.

Caveats: I have a day job, and in any case never want to work as hard as he does, spitting sometimes 2 or 3 articles a day.

But I want to try it.

When I work with the young team and the younger students I work with in my day job, I am continuously urging us to fill our curriculum with a lot more *modeling* of how hardcore geeks work and think.

So. Teacher, model thyself!






